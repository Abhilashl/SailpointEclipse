<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="aci_PerformReversal" type="IdentityTrigger">
  <Description>This rule can be used for Certification Events that use rule triggers. The previousIdentity and newIdentity hold snapshots of the identity before the update has occurred and the state of the identity after the update, respectively.</Description>
  <Signature returnType="boolean"/>
  <Source><![CDATA[
  
/*
    Rule:  aci_PerformReversal
    Author:  Steve Nuffer
	
    Date:  November 14, 2016	
	Version: 1.1

    if (Notify Y --> N) and (CURRENT_EMPLOYEE_FLAG Y --> Y)
    Send Reversal / Extension
    
*/
import org.apache.log4j.Logger; 
import sailpoint.object.*;
import sailpoint.tools.Util;

Logger logger = Logger.getLogger("com.aci.rule.aci_PerformReversal");
logger.debug("aci_PerformReversal");

boolean performLCM = false;

// The instanceof operator returns false if the object is null or void
// as well as if it is a different object type.
if (!(previousIdentity instanceof Identity)) {
    // New Hire or Error on newIdentity
    logger.debug("    Previous Identity Null ");
    return false;
}

if ( !(newIdentity instanceof Identity)) {
    // New Hire or Error on newIdentity
    logger.debug("    New Identity Null");
    return false;
}    
  
// Exit if this is this a Hire or Rehire
if ( previousIdentity.isInactive() || newIdentity.isInactive() ) {
    // Hire or Rehire
    return false;
}

String identityPersonID = newIdentity.getAttribute("personId");
logger.debug("    PERSON_ID=" + identityPersonID);

// Notification Y-->N
String oldTermNotify = previousIdentity.getAttribute("termNotification");
String newTermNotify = newIdentity.getAttribute("termNotification");

if ( "Y".equalsIgnoreCase(oldTermNotify) && "N".equalsIgnoreCase(newTermNotify) ) {
    // Reversal or Extension
    performLCM=true;
}

logger.debug ("    performLCM=" + performLCM);
return performLCM;  
  
  ]]></Source>
</Rule>
