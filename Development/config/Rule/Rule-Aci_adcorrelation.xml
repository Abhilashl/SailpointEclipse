<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="aci_ADCorrelation" type="Correlation">
  <Description>Identity Correlation Rules are used to find identities to which new accounts can be attached.

A correlation rule must return a Map with one of the specified Return arguments.</Description>
  <Signature returnType="Map">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="environment" type="Map">
        <Description>
          Arguments passed to the aggregation task.
        </Description>
      </Argument>
      <Argument name="application">
        <Description>
          Application being aggregated.
        </Description>
      </Argument>
      <Argument name="account">
        <Description>
          A sailpoint.object.ResourceObject returned from the
          collector.
        </Description>
      </Argument>
      <Argument name="link">
        <Description>
          Existing link to this account.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="identityName">
        <Description>
          The name of an Identity object.
        </Description>
      </Argument>
      <Argument name="identity">
        <Description>
          A fully resolved Identity object if the rule wants
          to do its own queries to locate the identity.
        </Description>
      </Argument>
      <Argument name="identityAttributeName">
        <Description>
          The name of the extended attribute that can be used
          to locate an existing identity.
        </Description>
      </Argument>
      <Argument name="identityAttributeValue">
        <Description>
          The value of the named extended attribute that can be used
          to locate an existing identity. This attribute is used
          together with the identityAttributeName argument.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source><![CDATA[
/*   
    Rule:    aci_ADCorrelation
    Author:  Steve Nuffer
       
    Author:  Steve Nuffer
	
    Date:  February 23, 2017
    Version:  1.1

*/

import org.apache.log4j.Logger;
import sailpoint.object.*;
import sailpoint.api.*;
import sailpoint.tools.Util;
import java.util.HashMap;
import java.util.Map;

Logger  logger = Logger.getLogger("com.aci.rule.aci_ADCorrelation");

Map returnMap = new HashMap();

String acctFname = account.getStringAttribute("givenName");
String acctLname = account.getStringAttribute("sn");
String acctAccount = link.getNativeIdentity();
String identityName = "";
int countRows = 0;

logger.debug("acctAccount=" + acctAccount);

// Have values    
if ( ( acctFname != null ) && ( acctLname != null ) ) {
    //First and last name have values
    logger.debug("    firstName=" + acctFname + "  lastName=" + acctLname);    

	// Find an existing Identity by first and last name
	// 
	QueryOptions qo = new QueryOptions();
	qo.addFilter(Filter.eq("firstname", acctFname));
	qo.addFilter(Filter.eq("lastname", acctLname));
	
	Iterator rows = context.search(Identity.class, qo,Util.asList("name"));
	
	if (null != rows) {
	    // Found an existing identity
	    while (rows.hasNext()) {
	        countRows++;
	        identityName = (String) rows.next()[0];
	        logger.debug("    (" + countRows + ")Existing: identityName=" + identityName );
	    }
	}
	
	sailpoint.tools.Util.flushIterator(rows);        
} else {
    // No Values to search on
    logger.debug("    No first or last name");
} 

// If only one identity, then match
switch (countRows) {
        case 0:
            logger.debug("    No identity matches");
            break;
        case 1:
            logger.debug("    Single Identity match");
            returnMap.put("identityName", identityName);
            break;
        default:
            logger.debug("    Too many possibilities.  countRows=" + countRows);            
            break;
}
logger.debug("    returnMap=" + returnMap);

return returnMap;
]]></Source>
</Rule>