<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="_ADAttributes">
  <Description>This rule can be executed in the console or in debug mode to return information </Description>
  <Signature returnType="String">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="environment" type="Map">
        <Description>
           Arguments passed to the aggregation or refresh task.
        </Description>
      </Argument>
      <Argument name="identity">
        <Description>
           The Identity object that represents the user
           that is being aggregated.
        </Description>
      </Argument>
      <Argument name="attributeDefinition">
        <Description>
           The AttributeDefinition object for this attribute.
        </Description>
      </Argument>
      <Argument name="link">
        <Description>
           The Link object from the Identity, if this is an application
           mapping rule.  For global mapping rules this will be void.
        </Description>
      </Argument>
      <Argument name="attributeSource">
        <Description>
          The AttributeSource object.
        </Description>
      </Argument>
      <Argument name="oldValue">
        <Description>
          The original value of the application account attribute.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="attributeValue">
        <Description>
          The value of the attribute that should be populated.
          The rule should return this value.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source><![CDATA[
/*
        Rule:  _ADAttributes
        Author:  Steve Nuffer
	
	
	Version: .2000

*/
import org.apache.log4j.Logger; 
import sailpoint.object.*;
import org.apache.jmeter.services.FileServer;

String appName = "DEV Active Directory tst.aciww.com";
String runningASUser = System.getProperty("user.name");

Logger log = Logger.getLogger("com.aci.rule.aci_SourceMapping");
String csvFileName = "\\\\cov6nas02\\slpdevxfr\\sailpoint\\_ADAttributes." + runningASUser + ".csv";

// Create the File handle
File csvFile = new File(csvFileName);
try
{    
    fileWriter = new PrintWriter( new FileOutputStream( csvFile ));
}
catch ( Exception e )
{
    // User doesn't have permission to write    
    return "Execute from Console OR the file is open";
}

System.out.println("****************  " + appName + "  ****************\n");
Application app = context.getObjectByName(Application.class, appName);

if (null == app) {  
   log.error("Could not find application named:" + appName);  
   return;  
} 

Filter qoFilter = Filter.eq("application", app);

QueryOptions qo = new QueryOptions();  
qo.addFilter(qoFilter);
//qo.setOrderBy("accountName");  
  
//Print to a file
//  Printer header to CSV file
fileWriter.println("identitytName!identityFname!identityKnownAs!identityLname!acctDisplayName!acctSamName!idendityPersonID!acctDistName!acctUPN!acctMail!acctPhone!acctType!acctFlags");	

Iterator it = context.search(Link.class, qo);  
while (it.hasNext()) {  
    Link link = (Link) it.next();  
	
	// Get Identity attributes
	Identity identity = link.getIdentity();
	String identitytName  = identity.getDisplayName();
    String idendityPersonID = identity.getStringAttribute("personId");
    String identityFname = identity.getFirstname();
    String identityLname = identity.getLastname();
    String identityKnownAs = identity.getStringAttribute("KNOWN_AS");
		
	// Get application attributes
    Attributes attributes = link.getAttributes();
	//String acctName = link.getNativeIdentity();  
    String acctSamName = attributes.getString("sAMAccountName");
	String acctEmpID = attributes.getString("employeeID");
	
    String acctUPN = attributes.getString("userPrincipalName");
    String acctMail = attributes.getString("mail");
    String acctPhone = attributes.getString("telephoneNumber");
    String acctType = attributes.getString("accountType");
    String acctFlags = attributes.getString("accountFlags");
    String acctDistName = attributes.getString("distinguishedName");
    String acctDisplayName = attributes.getString("displayName");

    // Print to stdout or console
    //String output = String.format("%-20s  %-40s  %-15s", new Object[] {acctSamName,acctMail,acctType});
	//System.out.println(output);
	
	//Print row to a file   
	fileWriter.println(identitytName + "!" + identityFname + "!" + identityKnownAs + "!" + identityLname + "!" + acctDisplayName + "!" + acctSamName + "!" + idendityPersonID + "!" + acctDistName + "!" + acctUPN + "!" + acctMail + "!" + acctPhone + "!" + acctType + "!" + acctFlags);	
 }  
 
// Close File handles
fileWriter.flush();
fileWriter.close();

sailpoint.tools.Util.flushIterator(it); 

return "Contents saved to " + csvFileName + "    ***  Delimeter is !  ***";

 ]]></Source>
</Rule>
