<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="aci_setManager" type="IdentityAttributeTarget">
  <Description>Identity attribute target rules are used to tranform identity attribute values that are being pushed to targets.</Description>
  <ReferencedRules>
    <Reference class="sailpoint.object.Rule" name="aci_Library"/>
  </ReferencedRules>
  <Signature returnType="Object">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="value" type="Object">
        <Description>
           The value of the identity attribute.  Note that this could be single value or a list of values.
        </Description>
      </Argument>
      <Argument name="sourceIdentityAttribute">
        <Description>
           The sailpoint.object.ObjectAttribute for this target.
        </Description>
      </Argument>
      <Argument name="sourceIdentityAttributeName">
        <Description>
           The name of the identity attribute for this target.
        </Description>
      </Argument>
      <Argument name="sourceAttributeRequest">
        <Description>
           The sailpoint.object.ProvisioningPlan.AttributeRequest that is
           setting the attribute on the identity.
        </Description>
      </Argument>
      <Argument name="target">
        <Description>
           The sailpoint.object.AttributeTarget that is being processed.
        </Description>
      </Argument>
      <Argument name="identity">
        <Description>
           The sailpoint.object.Identity that is being processed.
        </Description>
      </Argument>
      <Argument name="project">
        <Description>
           The sailpoint.object.ProvisioningProject that has the changes that
           are being requested.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="attributeValue">
        <Description>
          The transformed value that will be pushed to the target.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source><![CDATA[
  
  /*
    Rule:  aci_setManager
    
    Author:  Steve Nuffer
	
    Date:  September 16, 2016
    Version:  1.2
*/

import java.util.*;
import sailpoint.api.IdentityService;
import sailpoint.object.*;
import org.apache.log4j.Logger; 
import sailpoint.tools.Util;

Logger logger = Logger.getLogger("com.aci.rule.aci_setManager");
logger.debug("aci_setManager");

String appName = target.getApplication().getName();
String identitytName  = identity.getDisplayName();
String attrTarget = target.getName().toLowerCase();
String appConnectorType = target.getApplication().getConnector();
Identity managerObj = identity.getManager();
Link mgrLink = null;

logger.debug("Name= " + identitytName + "   appName=" + appName + "   appConnectorType=" + appConnectorType + "   Target=" + attrTarget);

// Based upon connector Type
switch (appConnectorType) {
    //**************************************************************************
    //*****  Active Directory
    case "sailpoint.connector.ADLDAPConnector":
        logger.debug("sailpoint.connector.ADLDAPConnector");

        // Check for tsacorp forest
        if ( appName.toLowerCase().contains("tsacorp") ) {
            // A domain of tsacorp
            mgrLink = getMgrLink(managerObj,"tsacorp");
        } else {
            mgrLink = getMgrLink(managerObj,appName);                
        }    
        
        //Manager Found?
        if ( mgrLink != null ) {
            // Manager Link Found
            String mgrDN = mgrLink.getNativeIdentity();
            logger.debug("Found Link");
            
            // Check to see if empty
            if ( Util.isNotNullOrEmpty(mgrDN) ) {
                logger.debug("Return(" + attrTarget + ")=" + mgrDN);
                return mgrDN;
            }
        } else {
            // No manager found
            logger.debug("Set Null Link");
            return null;
        }
    break;
    //**************************************************************************
    //*****  Salesforce
    case "sailpoint.connector.ForceConnector":
    
        logger.debug("sailpoint.connector.ForceConnector");
        mgrLink = getMgrLink(managerObj,appName);

        //Manager Found?
        if ( mgrLink != null ) {
        
            String mgrEmail = mgrLink.getAttribute("email");
            String mgrId = mgrLink.getAttribute("Id");

            switch (attrTarget) {
                case "manager_email__c":
                    // Check to see if mgrEmail is empty
                    if ( Util.isNotNullOrEmpty(mgrEmail) ) {
                        logger.debug("Return(" + attrTarget + ")=" + mgrEmail);
                        return mgrEmail;
                    } else {
                        logger.debug("Set Null Link");
                        return null;
                    }
                break;
                case "managerid":
                    // Check to see if mgrId is empty
                    if ( Util.isNotNullOrEmpty(mgrId) ) {
                        logger.debug("Return(" + attrTarget + ")=" + mgrId);
                        return mgrId;
                    } else {
                        logger.debug("Set Null Link");
                        return null;
                    }
                break;
            } // end switch (target) 
        } else {
            // No manager found
            logger.debug("Set Null Link");
            return null;
        } 
    break;     
} // switch end
logger.debug("END");
  
  ]]></Source>
</Rule>
